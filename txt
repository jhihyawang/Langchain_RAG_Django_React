import numpy as np

def extract_tables(self, img, i, j, box):
    import json, os
    coords = box.tolist()  # [x1, y1, x2, y2]
    expand_coords = [coords[0]-50, coords[1]-40, coords[2]+50, coords[3]+50]
    cropped = img.crop(expand_coords)
    path = os.path.join(self.output_dir, "tables", f"page{i}_table{j+1}.png")
    cropped.save(path)

    # 1. 執行 EasyOCR
    ocr = self.reader.readtext(np.array(cropped))
    # 2. 整理結果：只取高置信度
    ocr_boxes = []
    for (box, text, conf) in ocr:
        if conf > 0.5 and text.strip():
            xs = [pt[0] for pt in box]
            ys = [pt[1] for pt in box]
            x1, y1 = int(min(xs)), int(min(ys))
            x2, y2 = int(max(xs)), int(max(ys))
            ocr_boxes.append([x1, y1, x2, y2, text.strip()])

    # 3. 依 y1 先分群，再群內依 x1 排序
    # (依據最左側 anchor row 分行)
    min_x = min(b[0] for b in ocr_boxes) if ocr_boxes else 0
    x_tol = 15
    anchor_boxes = [b for b in ocr_boxes if abs(b[0] - min_x) < x_tol]
    anchor_ys = sorted((b[1] + b[3]) // 2 for b in anchor_boxes)
    def assign_row(y, anchors):
        anchors = np.array(anchors)
        return int(np.argmin(np.abs(anchors - y)))
    row_groups = [[] for _ in anchor_ys] if anchor_ys else []
    for b in ocr_boxes:
        cy = (b[1] + b[3]) // 2
        row_idx = assign_row(cy, anchor_ys)
        row_groups[row_idx].append(b)
    # 行內左到右排序
    rows_sorted = [sorted(row, key=lambda b: b[0]) for row in row_groups]
    # 4. 合成有序文字（以 \t 分隔欄，\n 分隔行）
    merged = "\n".join(
        "\t".join(b[4] for b in row) for row in rows_sorted if row
    )

    # 5. 組 prompt 給 LLM
    prompt = (
        f"以下圖片是一張表格，OCR 分行內容如下：\n{merged}\n"
        "請根據圖片與文字內容還原原始表格，並回傳 markdown 格式的表格，"
        "如遇到複合欄位請合併處理，標題結構可參考提供文字，勿遺漏資料。"
    )
    summary = self.summarize_image(path, prompt)

    table_result = {
        "page": i,
        "image": path,
        "content": summary,
        "media_type": "table"
    }
    self.vectorstore.add(
        content=summary,
        page=i,
        document_id=self.knowledge_id,
        media_type="table",
        title=self.knowledge_title,
        source=path
    )
    return table_result
