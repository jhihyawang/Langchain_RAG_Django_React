# tasks.py
import json
import os

import fitz  # PyMuPDF
from background_task import background
from django.conf import settings

from common.modules.processor.pdf_processor import PdfProcessor
from common.modules.processor.vector_store import VectorStoreHandler
from enterprise_assistant.models import Knowledge


@background(schedule=0)
def process_pdf_background(knowledge_id):
    try:
        knowledge = Knowledge.objects.get(id=knowledge_id)
        # 檔案不存在就跳過
        if not knowledge.file or not os.path.exists(knowledge.file.path):
            print(f"❌ 檔案不存在，跳過 Knowledge ID {knowledge_id}")
            knowledge.processing_status = "error"
            knowledge.save()
            return

        # 設為 processing
        knowledge.processing_status = "processing"
        knowledge.save()

        # 1) 呼叫 PdfProcessor 擷取所有 chunks
        processor = PdfProcessor(
            pdf_path=knowledge.file.path,
            knowledge_id=knowledge_id,
            knowledge_title=knowledge.title
        )
        chunks, rotated_pages = processor.optimized_process()

        # 2) 統一寫入向量庫
        vectorstore = VectorStoreHandler(db_path="chroma_user_db")
        for item in chunks:
            vectorstore.add(
                content=item["content"],
                page=item["page"],
                document_id=knowledge_id,
                media_type=item["media_type"],
                title=knowledge.title,
                source=item["source"]
            )

        # 3) 更新 Knowledge 內容摘要與 chunk 數
        saved_chunks = vectorstore.list(knowledge_id)
        knowledge.content = saved_chunks[0]["content"] if saved_chunks else ""
        knowledge.chunk = len(saved_chunks)

        # 4) 處理旋轉原檔
        if rotated_pages:
            doc = fitz.open(knowledge.file.path)
            for pg in rotated_pages:
                page = doc[pg-1]
                page.set_rotation((page.rotation + 90) % 360)
            tmp = knowledge.file.path + ".rotated"
            doc.save(tmp); doc.close()
            os.replace(tmp, knowledge.file.path)

        # 5) 標記完成並通知
        knowledge.processing_status = "done"
        knowledge.save()

    except Exception as e:
        print(f"❌ 處理失敗：{e}")
        knowledge.processing_status = "error"
        knowledge.save()

    # 處理下一筆 pending
    nxt = Knowledge.objects.filter(processing_status="pending").order_by("created_at").first()
    if nxt:
        process_pdf_background(nxt.id)
