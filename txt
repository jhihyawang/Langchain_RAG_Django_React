import os
import re
import numpy as np
import gc
import torch
from typing import List
import pandas as pd
import json
from datetime import datetime
from PIL import Image
from pathlib import Path
import ollama
from easyocr import Reader
from common.modules.processor.vector_store import VectorStoreHandler

from docling.datamodel.base_models import InputFormat
from docling.datamodel.pipeline_options import (
    PdfPipelineOptions,
    EasyOcrOptions,
    TableFormerMode,
    AcceleratorDevice,
    AcceleratorOptions
)
from docling_core.types.doc import (
    PictureItem,
    TableItem,
    TextItem,
)
from docling_core.types.doc.document import TitleItem, SectionHeaderItem, FormulaItem, CodeItem, ListItem
from docling.backend.docling_parse_backend import DoclingParseDocumentBackend
from docling.document_converter import DocumentConverter, PdfFormatOption, PageRange

def log(msg):
    now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
    print(f"{now} {msg}")

class PdfProcessor:
    def table_to_sentences(self, df: pd.DataFrame) -> List[str]:
        sentences = []
        if df.empty:
            return sentences

        # 多層欄位（MultiIndex）處理為單層欄位
        if isinstance(df.columns, pd.MultiIndex):
            df.columns = ["-".join([str(level) for level in col if str(level).strip()]) for col in df.columns.values]

        n_rows, n_cols = df.shape

        # 偵測橫向表或縱向表
        vertical_score = 0
        if n_cols >= 2:
            first_col = df.iloc[:, 0]
            for val in first_col[:min(5, len(first_col))]:
                if isinstance(val, str) and len(val) <= 15 and not any(char.isdigit() for char in val):
                    vertical_score += 1
        orientation = "vertical" if vertical_score >= 0.6 * min(5, len(df)) else "horizontal"

        # 特殊結構：交叉表（欄為年份，列為部門/項目）
        if orientation == "horizontal" and any(re.search(r"20[0-9]{2}|19[0-9]{2}", str(col)) for col in df.columns[1:]):
            for _, row in df.iterrows():
                row_key = str(row[0]).strip()
                for i in range(1, len(row)):
                    year = str(df.columns[i]).strip()
                    val = str(row[i]) if row[i] is not None else ""
                    if str(val).strip():
                        sentences.append(f"{row_key}在{year}年為{val.strip()}。")
            return sentences

        # 一般橫向表格：欄位名在上，一列為一筆資料
        if orientation == "horizontal":
            for _, row in df.iterrows():
                parts = []
                for col, val in zip(df.columns, row):
                    val = str(val) if val is not None else ""
                    col = str(col) if col is not None else ""
                    if val.strip():
                        parts.append(f"{col.strip()}: {val.strip()}")
                if parts:
                    sentences.append("；".join(parts) + "。")

        # 一般縱向表格：欄位名在左側
        else:
            header = [str(h) if h is not None else "" for h in df.columns.tolist()]
            for row in df.itertuples(index=False):
                key = str(row[0]) if row[0] is not None else ""
                key = key.strip()
                parts = []
                for i in range(1, len(row)):
                    value = str(row[i]) if row[i] is not None else ""
                    if value.strip():
                        col_name = header[i]
                        parts.append(f"{key} - {col_name}: {value.strip()}")
                if parts:
                    sentences.append("；".join(parts) + "。")

        return sentences
