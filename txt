    def table_to_sentences(self, df: pd.DataFrame) -> List[str]:
        sentences = []
        if df.empty:
            return sentences

        # 多層欄位（MultiIndex）處理為單層欄位
        if isinstance(df.columns, pd.MultiIndex):
            df.columns = ["-".join([str(level) for level in col if str(level).strip()]) for col in df.columns.values]

        n_rows, n_cols = df.shape

        # 偵測橫向表或縱向表
        vertical_score = 0
        if n_cols >= 2:
            first_col = df.iloc[:, 0]
            for val in first_col[:min(5, len(first_col))]:
                if isinstance(val, str) and len(val) <= 15 and not any(char.isdigit() for char in val):
                    vertical_score += 1
        orientation = "vertical" if vertical_score >= 0.6 * min(5, len(df)) else "horizontal"

        # 特殊結構：交叉表（欄為年份，列為部門/項目）
        if orientation == "horizontal" and any(re.search(r"20[0-9]{2}|19[0-9]{2}", col) for col in df.columns[1:]):
            for _, row in df.iterrows():
                row_key = str(row[0]).strip()
                for i in range(1, len(row)):
                    year = str(df.columns[i]).strip()
                    val = str(row[i]).strip()
                    if val:
                        sentences.append(f"{row_key}在{year}年為{val}。")
            return sentences

        # 一般橫向表格：欄位名在上，一列為一筆資料
        if orientation == "horizontal":
            for _, row in df.iterrows():
                parts = [f"{str(col).strip()}: {str(val).strip()}" for col, val in zip(df.columns, row) if pd.notna(val) and str(val).strip() != ""]
                if parts:
                    sentences.append("；".join(parts) + "。")

        # 一般縱向表格：欄位名在左側
        else:
            header = df.columns.tolist()
            for row in df.itertuples(index=False):
                key = str(row[0]).strip()
                parts = []
                for i in range(1, len(row)):
                    value = row[i]
                    if pd.notna(value) and str(value).strip():
                        col_name = header[i]
                        parts.append(f"{key} - {col_name}: {str(value).strip()}")
                if parts:
                    sentences.append("；".join(parts) + "。")

        return sentences
