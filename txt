import os
from io import BytesIO
from PIL import Image
from docling.pipeline import PdfPipelineOptions, EasyOcrOptions, TableFormerMode
from docling.converter import DocumentConverter
from docling.input_format import InputFormat, PdfFormatOption
from docling.backend import DoclingParseDocumentBackend
import ollama

def summarize_image_with_llm(image_path, prompt="請詳細描述這張圖片的內容，若是圖表請說明其趨勢與關鍵數據"):
    system_prompt = (
        "你是一位針對圖片進行分析與內容還原的助手，請回傳純內容摘要。"
        "若是圖片中包含文字請盡可能還原。"
        "若是圖表，請指出圖表類型、各軸意義、趨勢與關鍵數據。"
    )

    try:
        response = ollama.chat(
            model="gemma3:4b",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt, "images": [image_path]}
            ]
        )
        return response["message"]["content"]
    except Exception as e:
        return f"❌ 圖像摘要錯誤: {str(e)}"

def parse_pdf_with_docling(source_pdf_path: str, artifacts_path: str):
    pipeline_options = PdfPipelineOptions()
    pipeline_options.artifacts_path = artifacts_path
    pipeline_options.do_ocr = True
    pipeline_options.ocr_options = EasyOcrOptions(force_full_page_ocr=True)
    pipeline_options.ocr_options.lang = ["ch_tra", "en"]

    pipeline_options.generate_page_images = False
    pipeline_options.do_table_structure = True
    pipeline_options.table_structure_options.do_cell_matching = True
    pipeline_options.table_structure_options.mode = TableFormerMode.ACCURATE

    pipeline_options.generate_picture_images = True
    pipeline_options.do_picture_classification = True
    pipeline_options.do_code_enrichment = True
    pipeline_options.do_formula_enrichment = True

    backend = DoclingParseDocumentBackend
    doc_converter = DocumentConverter(
        format_options={
            InputFormat.PDF: PdfFormatOption(
                backend=backend,
                pipeline_options=pipeline_options
            )
        }
    )

    conversion_result = doc_converter.convert(source=source_pdf_path)
    doc = conversion_result.document

    result = []

    image_dir = os.path.join("media", "docling_images")
    os.makedirs(image_dir, exist_ok=True)

    for page in doc.pages:
        page_index = page.page_index if hasattr(page, "page_index") else 0
        page_number = page_index + 1
        markdown_blocks = []

        # 原始文字內容
        page_content = page.export_to_markdown()
        markdown_blocks.append(page_content)

        # 插入每張圖片摘要
        for i, img in enumerate(page.images):
            try:
                image_bytes = img.to_bytes()
                image = Image.open(BytesIO(image_bytes))

                image_path = os.path.join(image_dir, f"page_{page_number}_img_{i+1}.png")
                image.save(image_path)

                summary = summarize_image_with_llm(image_path)

                image_block = (
                    f"\n\n![圖示 page_{page_number}_img_{i+1}](/{image_path})\n"
                    f"🖼️ **圖片摘要**：\n{summary.strip()}"
                )
                markdown_blocks.append(image_block)
            except Exception as e:
                print(f"⚠️ 第 {page_number} 頁第 {i+1} 張圖片處理失敗：{e}")

        final_markdown = "\n\n".join(markdown_blocks)
        result.append({
            "page": page_number,
            "content": final_markdown,
            "media_type": "text",  # 已整合文字+圖像摘要，統一為 text
            "source": f"page_{page_number}"
        })

    return result
