def extract_texts(self, page, page_num, img=None):
    try:
        text = page.extract_text() or ""
        if self.should_ocr(text) and img is not None:
            # OCR 處理
            path = os.path.join(self.output_dir, "ocr_fallback", f"page_{page_num}.png")
            img.save(path)
            ocr_results = self.reader.readtext(np.array(img))
            # 判斷表格頁 or 純文字頁
            if len(ocr_results) > 12 and self.is_table_like(ocr_results):
                # ====== 表格流程 ======
                ocr_boxes_sorted = self.merge_and_sort_ocr_boxes(ocr_results)
                # 轉成 markdown 格式（或 tab 分隔給 LLM）
                ocr_merged = "\t".join([b[4] for b in ocr_boxes_sorted])
                content = ocr_merged
                source = "ocr_table"
            else:
                # ====== 純文字流程 ======
                ocr_texts = [t for _, t, conf in ocr_results if conf > 0.5]
                ocr_merged = "\n".join(ocr_texts) if ocr_texts else ""
                content = ocr_merged
                source = "ocr"
        else:
            # 直接取 pdfplumber 的文字
            content = text
            source = "ori"

        print(f"文字內容:\n\n{content[:300]}...")  # 長文本可只顯示前幾百字
        return {
            "page": page_num,
            "media_type": "text",
            "source": source,
            "content": content
        }
    except Exception as e:
        log(f"❌ 第 {page_num} 頁文字抽取异常：{e}")
        return {
            "page": page_num,
            "media_type": "text",
            "source": None,
            "content": f"❌ 文字抽取失敗：{e}"
        }
