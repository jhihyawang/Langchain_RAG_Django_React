// ✅ 修改版：每一頁為 group，內部依照 media_type + source 再群組
import React, { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import API_BASE_URL from "../api";

const KnowledgeEditPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [title, setTitle] = useState("");
  const [pageGroups, setPageGroups] = useState([]);
  const [modifiedChunks, setModifiedChunks] = useState(new Set());
  const [searchText, setSearchText] = useState("");

  useEffect(() => {
    fetch(`${API_BASE_URL}/api/knowledge/${id}/chunks/`)
      .then((res) => res.json())
      .then((data) => {
        setTitle((data.title || "").replace(/\.pdf$/i, ""));
        const grouped = groupChunks(data.chunks || []);
        setPageGroups(grouped);
      })
      .catch((err) => console.error("❌ 載入 chunks 失敗", err));
  }, [id]);

  const groupChunks = (chunks) => {
    const pages = {};
    for (const chunk of chunks) {
      const pageKey = chunk.page_number;
      if (!pages[pageKey]) pages[pageKey] = { page_number: pageKey, groups: [] };

      const sourceKey = Array.isArray(chunk.source)
        ? chunk.source[0]
        : typeof chunk.source === "string"
        ? chunk.source
        : `text-${chunk.id}`;

      const subGroupKey = `${chunk.media_type}-${sourceKey}`;

      let subGroup = pages[pageKey].groups.find((g) => g.key === subGroupKey);
      if (!subGroup) {
        subGroup = {
          key: subGroupKey,
          media_type: chunk.media_type,
          source: sourceKey,
          chunks: [],
        };
        pages[pageKey].groups.push(subGroup);
      }
      subGroup.chunks.push(chunk);
    }
    return Object.values(pages);
  };

  const handleChunkEdit = (chunkId, newContent) => {
    setPageGroups((prev) =>
      prev.map((page) => ({
        ...page,
        groups: page.groups.map((group) => ({
          ...group,
          chunks: group.chunks.map((chunk) =>
            chunk.id === chunkId ? { ...chunk, content: newContent } : chunk
          ),
        })),
      }))
    );
  };

  const handleDeleteChunk = async (chunkId) => {
    if (!window.confirm("確定要刪除此區塊嗎？")) return;
    try {
      const res = await fetch(`${API_BASE_URL}/api/knowledge/chunk/${chunkId}/`, {
        method: "DELETE",
      });
      if (res.status === 204) {
        setPageGroups((prev) =>
          prev
            .map((page) => ({
              ...page,
              groups: page.groups
                .map((group) => ({
                  ...group,
                  chunks: group.chunks.filter((chunk) => chunk.id !== chunkId),
                }))
                .filter((group) => group.chunks.length > 0),
            }))
            .filter((page) => page.groups.length > 0)
        );
      } else {
        alert("❌ 刪除失敗");
      }
    } catch (err) {
      console.error("❌ 刪除 chunk 失敗", err);
    }
  };

  const handleSaveAll = async () => {
    try {
      for (const page of pageGroups) {
        for (const group of page.groups) {
          for (const chunk of group.chunks) {
            await fetch(`${API_BASE_URL}/api/knowledge/chunk/${chunk.id}/`, {
              method: "PUT",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ content: chunk.content }),
            });
          }
        }
      }
      alert("✅ 所有區塊已成功更新！");
      navigate("/document");
    } catch (err) {
      console.error("❌ 儲存失敗", err);
      alert("❌ 儲存失敗");
    }
  };

  return (
    <div className="container mt-4">
      <h3>📝 編輯文件內容（ID: {id}）</h3>
      <p>檔案名稱：{title}</p>
      <input
        type="text"
        className="form-control mb-3"
        placeholder="🔍 搜尋 chunk 內容關鍵字..."
        value={searchText}
        onChange={(e) => setSearchText(e.target.value)}
      />

      {pageGroups.map((page) => (
        <div key={page.page_number} className="mb-4 border rounded p-3 bg-light">
          <h5>📄 頁碼：{page.page_number}</h5>

          {page.groups.map((group, gIdx) => (
            <div key={`${page.page_number}-${gIdx}`} className="mb-4">
              {group.media_type !== "text" && group.source && (
                <div className="mb-2 text-center">
                  <img
                    src={`${API_BASE_URL}/${group.source}`}
                    alt={`group-${gIdx}`}
                    style={{ maxWidth: "100%", maxHeight: "300px", border: "1px solid #ccc" }}
                  />
                </div>
              )}

              {group.chunks.map((chunk) => (
                <div className="card my-2" key={chunk.id}>
                  <div className="card-header d-flex justify-content-between align-items-center">
                    <span>
                      🧩 Chunk #{chunk.chunk_index}
                      {modifiedChunks.has(chunk.id) && (
                        <span className="text-warning ms-2">🟡 已修改</span>
                      )}
                    </span>
                    <button
                      className="btn btn-sm btn-danger"
                      onClick={() => handleDeleteChunk(chunk.id)}
                    >
                      🗑️ 刪除
                    </button>
                  </div>
                  <div className="card-body">
                    <textarea
                      className="form-control"
                      rows="5"
                      value={chunk.content}
                      onChange={(e) => {
                        handleChunkEdit(chunk.id, e.target.value);
                        setModifiedChunks((prev) => {
                          const next = new Set(prev);
                          next.add(chunk.id);
                          return next;
                        });
                      }}
                    ></textarea>
                  </div>
                </div>
              ))}
            </div>
          ))}
        </div>
      ))}

      <button className="btn btn-success w-100 mt-4" onClick={handleSaveAll}>
        💾 儲存所有變更
      </button>
    </div>
  );
};

export default KnowledgeEditPage;
